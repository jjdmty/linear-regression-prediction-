function [y1,xf1] = myNeuralNetworkFunction(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 28-Sep-2019 09:15:16.
% 
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   xi1 = 1x2 matrix, initial 2 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 1x2 matrix, final 2 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 6.16038968749999;
x1_step1.gain = 0.16346139446685;
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.4380141946809219533;3.2155095462070293344;2.4797461478127873491;0.86715239677247046846;0.48496557343446289323;0.181911404369678259;0.5348446590578633808;-1.6382234091589176206;-3.9440162240934126814;-4.5452514714686484965];
IW1_1 = [2.2618936229602382149 -3.7815195345238046265;-3.1456655324596276557 2.8614051862775649049;-3.476281392879592147 -3.7854418190375249686;-1.5049685158696979315 4.1787048928388133007;-1.9082852877949838533 4.1603043967738182474;-1.887762806377680791 4.6641045021934637305;1.9078512906191615883 4.6853892920810684686;-4.4752301690215450236 0.8073940703260213958;-3.916033649268321426 -0.77983899388274724451;-4.3855450898812025073 0.29644023206107877888];

% Layer 2
b2 = 0.5562147737332066022;
LW2_1 = [0.11358140034015881681 -0.86329138282427619888 -0.0017995314314743458828 0.5818210118275816134 -0.71419226492172105392 0.094370941448831707765 0.1200624512507664915 -0.19630413123269763176 -0.10742862456240587221 0.070909009845843751219];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.16346139446685;
y1_step1.xoffset = 6.16038968749999;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),2,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
